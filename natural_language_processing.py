# -*- coding: utf-8 -*-
"""natural_language_processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SjbX3ovH6XDm2j3UDEFFrxTsGJrTlNch

# Natural Language Processing

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

dataset = pd.read_csv('Restaurant_Reviews.tsv', delimiter = '\t', quoting = 3)# to ignore all ("") we use quoting = 3

print(dataset)

"""## Cleaning the texts"""

import re
import nltk
nltk.download('stopwords') #to not include articles like a the etc which doenot make any meaning
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer #apply stemming of root (eg- oh i love , in this love is positive so it apply stemming to avoid redudancy)
corpus = [] #it has all list of reviews after cleaning
for i in range(0, 1000):
  review = re.sub('[^a-zA-Z]', ' ', dataset['Review'][i]) #to remove all punctuations(,"";.etc) and keep only letter
  review = review.lower()# all capital letters to lower case
  review = review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]# to apply stemming for each word in the list #For example, stemming would reduce the words "running," "runner," and "ran" to the base form "run."
  review = ' '.join(review)
  corpus.append(review)

print(corpus)

"""## Creating the Bag of Words model"""

#tokenization is done here by creating bag of words
from sklearn.feature_extraction.text import CountVectorizer # this import do the tokenization
cv = CountVectorizer(max_features = 1500) # to get 1500 most frequently used words to take
X = cv.fit_transform(corpus).toarray()# fit will take all the words and transform will put all the words in column ,matrix of array should always be 2d array so we apply toarray
y = dataset.iloc[:, -1].values

len([X[0]]) #number of elements in the first row

print(X)

y

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

"""## Training the Naive Bayes model on the Training set"""

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

"""## Predicting the Test set results"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""## Predicting if a single review is positive or negative

### Positive review

Use our model to predict if the following review:

"I love this restaurant so much"

is positive or negative.

**Solution:** We just repeat the same text preprocessing process we did before, but this time with a single review.
"""

new_review = 'I love this restaurant so much'
new_review = re.sub('[^a-zA-Z]', ' ', new_review)
new_review = new_review.lower()
new_review = new_review.split()
ps = PorterStemmer()
all_stopwords = stopwords.words('english')
all_stopwords.remove('not')
new_review = [ps.stem(word) for word in new_review if not word in set(all_stopwords)]
new_review = ' '.join(new_review)
new_corpus = [new_review]
new_X_test = cv.transform(new_corpus).toarray()
new_y_pred = classifier.predict(new_X_test)
print(new_y_pred)

"""The review was correctly predicted as positive (1) by our model.

## Negative review

Use our model to predict if the following review:

"I hate this restaurant so much"

is positive or negative.

**Solution:** We just repeat the same text preprocessing process we did before, but this time with a single review.
"""

new_review = 'I hate this restaurant so much'
new_review = re.sub('[^a-zA-Z]', ' ', new_review)
new_review = new_review.lower()
new_review = new_review.split()
ps = PorterStemmer()
all_stopwords = stopwords.words('english')
all_stopwords.remove('not')
new_review = [ps.stem(word) for word in new_review if not word in set(all_stopwords)]
new_review = ' '.join(new_review)
new_corpus = [new_review]
new_X_test = cv.transform(new_corpus).toarray()
new_y_pred = classifier.predict(new_X_test)
print(new_y_pred)

"""The review was correctly predicted as negative(0) by our model."""